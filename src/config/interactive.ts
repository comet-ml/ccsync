import { writeFileSync } from 'fs';
import { join } from 'path';
import { homedir } from 'os';
import prompts from 'prompts';
import axios from 'axios';
import { createLogger } from '../utils/logger';
import { getOpikConfig } from './index';
import { OpikConfig } from '../types';

interface InteractiveConfig {
  apiKey?: string;
  baseUrl: string;
  projectName?: string;
  workspace?: string;
  isLocal?: boolean;
}

async function validateOpikConnection(config: InteractiveConfig): Promise<boolean> {
  const logger = createLogger();
  
  try {
    logger.info('Validating Opik connection...');
    
    // Clean up the URL to avoid double slashes
    const baseUrl = config.baseUrl.replace(/\/+$/, ''); // Remove trailing slashes
    
    if (config.isLocal) {
      // For local instance, test the projects endpoint (no auth required)
      const url = `${baseUrl}/v1/private/projects`;
      
      const response = await axios.get(url, {
        timeout: 5000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (response.status === 200) {
        logger.success('Successfully connected to local Opik instance!');
        return true;
      }
    } else {
      // For cloud instance, use the auth endpoint
      const url = `${baseUrl}/v1/private/auth`;
      
      const response = await axios.post(url, {}, {
        timeout: 5000,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': config.apiKey!,
          'Comet-Workspace': config.workspace || 'default'
        }
      });
      
      if (response.status === 200 || response.status === 204) {
        logger.success('Successfully connected to Opik Cloud!');
        return true;
      }
    }
    
    logger.error('Failed to connect to Opik');
    return false;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      if (config.isLocal) {
        logger.error(`Failed to access local deployment at ${config.baseUrl}`);
      } else {
        if (error.response?.status === 401) {
          logger.error('Authentication failed: Invalid API key');
        } else if (error.response?.status === 403) {
          logger.error('Access denied: Workspace permission issue');
        } else if (error.response?.status === 404) {
          logger.error('Connection failed: Invalid URL or Opik instance not running');
        } else {
          logger.error(`Connection failed: ${error.message}`);
        }
      }
    } else {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      if (config.isLocal) {
        logger.error(`Failed to access local deployment at ${config.baseUrl}`);
      } else {
        logger.error(`Connection failed: ${errorMessage}`);
      }
    }
    return false;
  }
}

function writeConfigFile(config: InteractiveConfig): void {
  const configPath = join(homedir(), '.opik.config');
  const configContent = `# Opik Configuration
# Generated by @opik/ccsync

${config.apiKey ? `api_key = ${config.apiKey}` : '# api_key = your-api-key'}
url_override = ${config.baseUrl}
workspace = ${config.workspace || 'default'}
project_name = ${config.projectName || 'Claude Code'}
is_local = ${config.isLocal || false}
`;

  writeFileSync(configPath, configContent, 'utf8');
  
  const logger = createLogger();
  logger.success(`Configuration saved to ${configPath}`);
}

export async function runInteractiveConfig(): Promise<void> {
  const logger = createLogger();
  
  logger.info('üöÄ Welcome to Opik Configuration Setup');
  logger.info('This will help you configure your connection to Opik for syncing Claude Code conversations.');
  logger.info('');
  
  // Check if configuration already exists
  let existingConfig: OpikConfig | null = null;
  try {
    existingConfig = getOpikConfig();
    logger.info('üìã Found existing configuration:');
    logger.info(`  Opik URL: ${existingConfig.base_url}`);
    logger.info(`  API Key: ${existingConfig.api_key ? '***configured***' : 'not set'}`);
    logger.info(`  Workspace: ${existingConfig.workspace || 'default'}`);
    logger.info(`  Project: ${existingConfig.project_name || 'Claude Code'}`);
    logger.info(`  Local instance: ${existingConfig.is_local ? 'Yes' : 'No'}`);
    logger.info('');
  } catch (error) {
    logger.info('üìù No existing configuration found. Let\'s set one up!');
    logger.info('');
  }
  
  const questions: prompts.PromptObject[] = [
    {
      type: 'confirm',
      name: 'shouldConfigure',
      message: existingConfig 
        ? 'Do you want to update your existing configuration?' 
        : 'Do you want to set up Opik configuration now?',
      initial: true
    },
    {
      type: (prev: any) => prev ? 'select' : null,
      name: 'instanceType',
      message: 'Which Opik instance do you want to use?',
      choices: [
        { title: 'Opik Cloud', value: 'cloud' },
        { title: 'Local Opik instance', value: 'local' }
      ],
      initial: existingConfig?.is_local ? 1 : 0
    },
    {
      type: (prev: any, values: any) => values.shouldConfigure && values.instanceType === 'cloud' ? 'text' : null,
      name: 'apiKey',
      message: 'Enter your Opik API Key:',
      initial: existingConfig?.api_key || '',
      validate: (value: string) => {
        if (!value.trim()) {
          return 'API Key is required for Opik Cloud';
        }
        return true;
      }
    },
    {
      type: (prev: any, values: any) => values.shouldConfigure && values.instanceType === 'cloud' ? 'text' : null,
      name: 'workspace',
      message: 'Enter workspace name (press Enter for default):',
      initial: existingConfig?.workspace || 'default'
    },
    {
      type: (prev: any, values: any) => values.shouldConfigure ? 'text' : null,
      name: 'baseUrl',
      message: (prev: any, values: any) => values.instanceType === 'local' 
        ? 'Enter local Opik URL (press Enter for default):'
        : 'Enter Opik Cloud URL (press Enter for default):',
      initial: (prev: any, values: any) => values.instanceType === 'local' 
        ? 'http://localhost:5173' 
        : existingConfig?.base_url || 'https://www.comet.com/opik/api',
      validate: (value: string) => {
        if (!value.trim()) {
          return 'URL is required';
        }
        try {
          new URL(value);
          return true;
        } catch {
          return 'Please enter a valid URL';
        }
      }
    },
    {
      type: (prev: any, values: any) => values.shouldConfigure ? 'text' : null,
      name: 'projectName',
      message: 'Enter project name for traces (press Enter for default):',
      initial: existingConfig?.project_name || 'Claude Code'
    }
  ];
  
  const answers = await prompts(questions, {
    onCancel: () => {
      logger.info('Configuration cancelled.');
      process.exit(0);
    }
  });
  
  if (!answers.shouldConfigure) {
    logger.info('Configuration skipped.');
    return;
  }
  
  const config: InteractiveConfig = {
    apiKey: answers.apiKey?.trim(),
    baseUrl: answers.baseUrl.trim(),
    projectName: answers.projectName?.trim() || 'Claude Code',
    workspace: answers.workspace?.trim() || 'default',
    isLocal: answers.instanceType === 'local'
  };
  
  logger.info('');
  logger.info('üîç Testing connection...');
  
  const isValid = await validateOpikConnection(config);
  
  if (!isValid) {
    logger.error('');
    
    const retry = await prompts({
      type: 'confirm',
      name: 'shouldRetry',
      message: 'Do you want to try again?',
      initial: true
    });
    
    if (retry.shouldRetry) {
      return runInteractiveConfig();
    } else {
      logger.info('Configuration cancelled.');
      process.exit(1);
    }
  }
  
  // Save configuration
  writeConfigFile(config);
  
  logger.info('');
  logger.success('üéâ Configuration completed successfully!');
  logger.info('');
  logger.info('üìö Next steps:');
  logger.info('  1. List your Claude Code sessions: ccsync ls');
  logger.info('  2. Sync all conversations: ccsync sync --all');
  logger.info('  3. Set up automatic hooks for real-time syncing');
  logger.info('');
  logger.info('üìñ For more help, check the README or run: ccsync --help');
}

export async function showConfigStatus(): Promise<void> {
  const logger = createLogger();
  
  try {
    const opikConfig = getOpikConfig();
    
    logger.info('‚úÖ Current Opik Configuration:');
    logger.info(`  URL: ${opikConfig.base_url}`);
    logger.info(`  API Key: ${opikConfig.api_key ? '***configured***' : 'not set'}`);
    logger.info(`  Project: ${opikConfig.project_name || 'default'}`);
    logger.info('');
    
    // Test connection
    logger.info('üîç Testing connection...');
    const isValid = await validateOpikConnection({
      apiKey: opikConfig.api_key!,
      baseUrl: opikConfig.base_url,
      projectName: opikConfig.project_name
    });
    
    if (isValid) {
      logger.success('Connection successful!');
    } else {
      logger.error('Connection failed. Run `ccsync config` to reconfigure.');
    }
  } catch (error) {
    logger.error('No configuration found or configuration invalid.');
    logger.info('');
    logger.info('üí° To set up configuration, run: ccsync config');
    logger.info('');
    logger.info('üîß You can also configure using environment variables:');
    logger.info('  export OPIK_API_KEY="your-api-key"');
    logger.info('  export OPIK_BASE_URL="http://localhost:5173"');
    logger.info('  export OPIK_PROJECT_NAME="your-project"');
    
    process.exit(1);
  }
}
